@page "/bookmanage"
@inject AuthenticationService AuthenticationService
@inject NavigationManager Navigation
@using BooksSystem.Data
@using BooksSystem.Models
@using Microsoft.EntityFrameworkCore
@inject BooksContext _context

@if (showModal)
{
    <!-- 自定义警告模态框 -->
    <div class="modal-overlay" tabindex="-1">
        <div class="custom-modal">
            <div class="custom-modal-header">
                <h5 class="modal-title">⚠️ 注意</h5>
            </div>
            <div class="custom-modal-body">
                <p>@modalMessage</p>
            </div>
            <div class="custom-modal-footer">
                <button class="btn-close-modal" @onclick="CloseModal">好的</button>
            </div>
        </div>
    </div>
}
else if (AuthenticationService.IsLoggedIn && AuthenticationService._currentCustomer.Category == 1)
{
    <div class="book-manage-container">
        <h3>图书管理</h3>
        <button class="btn-add-book" @onclick="ShowAddBookForm">新增书籍</button>

        <div class="book-list">
            @foreach (var book in books)
            {
                <div class="book-item">
                    <div class="book-info">
                        <span class="book-title">@book.Title</span>
                        <span class="book-author">作者: @book.Author</span>
                        <span class="book-category">分类: @book.Category</span>
                        <span class="book-status">借阅状态: @(book.Enabled ? "可借" : "已借阅")</span>
                    </div>
                    <div class="book-actions">
                        <button class="btn-edit" @onclick="() => EditBook(book.Id)">编辑</button>
                        <button class="btn-delete" @onclick="() => ConfirmDelete(book.Id)">删除</button>
                    </div>
                </div>
            }
        </div>

        <div class="pagination justify-content-center mt-4">
            <!-- 上一页按钮 -->
            <button class="btn btn-sm btn-secondary mx-1" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                上一页
            </button>

            @if (totalPages <= 7)
            {
                @for (int i = 1; i <= totalPages; i++)
                {
                    <button class="btn btn-sm @(i == currentPage ? "btn-primary" : "btn-outline-primary") mx-1" disabled>
                        @i
                    </button>
                }
            }
            else
            {
                <button class="btn btn-sm @(1 == currentPage ? "btn-primary" : "btn-outline-primary") mx-1" disabled>
                    1
                </button>

                @if (currentPage > 4)
                {
                    <span class="mx-1">...</span>
                }

                @for (int i = Math.Max(2, currentPage - 2); i <= Math.Min(totalPages - 1, currentPage + 2); i++)
                {
                    <button class="btn btn-sm @(i == currentPage ? "btn-primary" : "btn-outline-primary") mx-1" disabled>
                        @i
                    </button>
                }

                @if (currentPage < totalPages - 3)
                {
                    <span class="mx-1">...</span>
                }

                <button class="btn btn-sm @(totalPages == currentPage ? "btn-primary" : "btn-outline-primary") mx-1" disabled>
                    @totalPages
                </button>
            }

            <!-- 下一页按钮 -->
            <button class="btn btn-sm btn-secondary mx-1" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                下一页
            </button>
        </div>

        @if (isDeleteDialogVisible)
        {
            <div class="modal-overlay">
                <div class="modal-content">
                    <h4>确定要删除这本书吗？</h4>
                    <div>
                        <button @onclick="ConfirmDeleteAction" class="btn btn-danger">确认</button>
                        <button @onclick="CancelDeleteAction" class="btn btn-secondary">取消</button>
                    </div>
                </div>
            </div>
        }
    </div>
}


@code {
    private bool showModal = false;
    private string modalMessage = string.Empty;

    private List<Book> books = new List<Book>();
    private int currentPage = 1;
    private int pageSize = 12; 
    private int totalPages;
    private bool isDeleteDialogVisible = false;
    private int bookIdToDelete;

    
    protected override void OnInitialized()
    {
        // 判断用户是否已登录
        if (!AuthenticationService.IsLoggedIn)
        {
            modalMessage = "您还未登录，请先登录！";
            showModal = true;
        }
        // 判断用户是否为管理员
        else if (!(AuthenticationService._currentCustomer.Category == 1))
        {
            modalMessage = "您没有管理员权限！";
            showModal = true;
        }
    }

    private void CloseModal()
    {
        showModal = false;
        Navigation.NavigateTo("/");
    }

    private async Task ChangePage(int page)
{
    if (page < 1 || page > totalPages) return;
    currentPage = page;
    await LoadBooks();  // 加载对应页面的书籍
}

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        // 获取书籍总数
        int totalBooks = await _context.Books.CountAsync();
        totalPages = (int)Math.Ceiling(totalBooks / (double)pageSize);

        // 分页查询书籍
        books = await _context.Books
            .OrderBy(b => b.Title)
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToListAsync();
    }

    // 删除按钮点击后，显示确认对话框
    private void ConfirmDelete(int bookId)
    {
        bookIdToDelete = bookId;  // 保存待删除书籍的ID
        isDeleteDialogVisible = true;  // 显示对话框
    }

    // 确认删除操作
    private async Task ConfirmDeleteAction()
    {
        // 执行删除操作
        var bookToDelete = books.FirstOrDefault(b => b.Id == bookIdToDelete);
        if (bookToDelete != null)
        {
            _context.Books.Remove(bookToDelete);  // 从数据库中删除书籍
            await _context.SaveChangesAsync();  // 保存更改
            books.Remove(bookToDelete);  // 从本地列表中移除书籍
        }

        isDeleteDialogVisible = false;  // 隐藏对话框
    }

    // 取消删除操作
    private void CancelDeleteAction()
    {
        isDeleteDialogVisible = false;  // 隐藏对话框
    }


    private void EditBook(int bookId)
    {
        Console.WriteLine($"Post bookId: {bookId}");
        Console.WriteLine($"Navigating to: /editBook?bookId={bookId}");
        Navigation.NavigateTo($"/editBook?bookId={bookId}");
    }

    private async Task ShowAddBookForm()
    {
        Navigation.NavigateTo("/addBook");
    }

}

<style>
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    background-color: rgba(0, 0, 0, 0.75);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1050;
}

/* 自定义模态框样式 */
.custom-modal {
    background: linear-gradient(135deg, #d0e1ff, #e0d9ff); /* 淡蓝紫色背景渐变 */
    border-radius: 12px;
    width: 90%;
    max-width: 400px;
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
    animation: fadeIn 0.3s ease;
    overflow: hidden;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* 美化字体 */
}

/* 模态框标题 */
.custom-modal-header {
    background-color: #809bce;
    color: white;
    padding: 1rem;
    text-align: center;
    font-weight: bold;
    font-size: 1.2rem;
}

/* 模态框内容 */
.custom-modal-body {
    padding: 1.5rem;
    font-size: 1rem;
    text-align: center;
    color: #4a4a4a;
}

/* 模态框底部 */
.custom-modal-footer {
    padding: 1rem;
    text-align: center;
    background-color: #e0d9ff;
}

/* 关闭按钮 */
.btn-close-modal {
    background-color: #809bce;
    color: white;
    padding: 0.5rem 1.5rem;
    font-size: 1rem;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.btn-close-modal:hover {
    background-color: #5a7ebb;
}

/* 弹入动画 */
@@keyframes fadeIn {
    from { opacity: 0; transform: translateY(-10px); }
    to { opacity: 1; transform: translateY(0); }
}

.book-manage-container {
    padding: 1.5rem;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    position: relative;
}

h3 {
    color: #4a4a4a;
}

.btn-add-book {
    position: absolute;
    right: 1.5rem;
    top: 1.5rem;
    padding: 0.5rem 1rem;
    background-color: #4a90e2;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

.btn-add-book:hover {
    background-color: #357ab9;
}

.book-list {
    margin-top: 2rem;
}

.book-item {
    display: flex;
    justify-content: space-between;
    padding: 1rem;
    border-bottom: 1px solid #e0e0e0;
}

.book-info {
    display: flex;
    flex-direction: column;
}

.book-title {
    font-weight: bold;
    color: #333;
}

.book-author, .book-category, .book-status {
    color: #666;
}

.book-actions button {
    margin-left: 0.5rem;
    padding: 0.3rem 0.7rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    color: white;
}

.btn-edit {
    background-color: #f0ad4e;
}

.btn-edit:hover {
    background-color: #ec971f;
}

.btn-delete {
    background-color: #d9534f;
}

.btn-delete:hover {
    background-color: #c9302c;
}

.pagination {
    margin-top: 1.5rem;
    text-align: center;
}

.page-number {
    padding: 0.5rem;
    margin: 0 0.3rem;
    border: 1px solid #d0d0d0;
    border-radius: 4px;
    cursor: pointer;
}

.page-number.active {
    background-color: #4a90e2;
    color: white;
}


/* 遮罩层 */
.modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.3);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;  /* 确保对话框在最上层 */
}

/* 对话框样式 */
.modal-content {
    background: #fff;
    padding: 20px;
    width: 100%;
    max-width: 400px;  /* 设置最大宽度 */
    border-radius: 8px;  /* 圆角 */
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    text-align: center;
    font-family: Arial, sans-serif;
}

/* 标题样式 */
.modal-content h4 {
    font-size: 18px;
    font-weight: 600;
    margin-bottom: 20px;
    color: #333;
}

/* 按钮样式 */
button {
    padding: 8px 16px;
    font-size: 14px;
    border-radius: 5px;
    border: none;
    cursor: pointer;
    transition: background-color 0.3s;
    margin: 5px;
}

button.btn-danger {
    background-color: #dc3545;
    color: white;
}

button.btn-danger:hover {
    background-color: #c82333;
}

button.btn-secondary {
    background-color: #6c757d;
    color: white;
}

button.btn-secondary:hover {
    background-color: #5a6268;
}
@@keyframes fadeIn {
    0% { opacity: 0; }
    100% { opacity: 1; }
}

.modal-content {
    animation: fadeIn 0.3s ease-in-out;
}
</style>
